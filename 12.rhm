#lang rhombus/static/and_meta

import:
  "util/advent_of_code.rhm" as aoc
  "util/grid.rhm" open
  "util/misc.rhm" open

@example_input(test_input1){
AAAA
BBCD
BBCC
EEEC

}

@example_input(test_input2){
OOOOO
OXOXO
OOOOO
OXOXO
OOOOO

}

@example_input(test_input3){
RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE

}

@example_input(test_input4){
OOOOOO
OXXXXX
OXOOOO
OOOXXX
OOOXOO
OOOOOO

}

annot.macro 'Region': 'Symbol'
annot.macro 'Dir': 'Any.of(#'N, #'E, #'S, #'W)'
annot.macro 'Borders': 'Map.of(Region, Set.of(Pair.of(Dir, Posn)))'

//def grid = Grid(test_input3)

fun add_border(borders :~ Borders,
               d0 :: Dir,
               r0 :: Region,
               p0 :: Posn,
               d1 :: Dir,
               r1 :: Region,
               p1 :: Posn) :~ Borders:
  fun get(r) :~ Set:
    borders.get(r, Set.empty)
  borders
    ++ {r0: get(r0) ++ { Pair(d0, p0) },
        r1: get(r1) ++ { Pair(d1, p1) }}

fun canonical_region(regions_eq :: Map.of(Region, Region),
                     region :: Region) :: Region:
  recur find(region = region):
    match regions_eq.get(region, #false)
    | #false: region
    | region: find(region)

// NB: this requires processing LRTB
fun assign_region(grid :: Grid,
                  posn :: Posn,
                  regions :~ Map.of(Posn, Region),
                  regions_eq :~ Map.of(Region, Region),
                  borders :~ Borders):
  def pn = posn $+ Posn.N
  def pw = posn $+ Posn.W
  def ch = grid[posn]
  def cn = grid[pn]
  def cw = grid[pw]
  def rn = if cn | canonical_region(regions_eq, regions[pn]) | #'outside
  def rw = if cw | canonical_region(regions_eq, regions[pw]) | #'outside
  match [ch == cn, ch == cw]
  | [#false, #false]:
      def rh = Symbol.gen(to_string(ch))
      values(regions ++ {posn: rh},
             regions_eq,
             add_border(borders, #'S, rn, pn, #'N, rh, posn)
               |> add_border(_, #'E, rw, pw, #'W, rh, posn))
  | [#false, #true]:
      values(regions ++ {posn: rw},
             regions_eq,
             add_border(borders, #'S, rn, pn, #'N, rw, posn))
  | [#true, #false]:
      values(regions ++ {posn: rn},
             regions_eq,
             add_border(borders, #'E, rw, pw, #'W, rn, posn))
  | [#true, #true]:
      if rn == rw
      | values(regions ++ {posn: rn},
               regions_eq,
               borders)
      | def rh = Symbol.gen(to_string(ch))
        values(regions ++ {posn: rh},
               regions_eq ++ {rn: rh, rw: rh},
               borders)

fun canonize_regions(regions :~ Map.of(Posn, Region),
                     regions_eq :~ Map.of(Region, Region))
  :~ Map.of(Region, Set.of(Posn)):
    for values(m :~ Map = {}) (values(posn, region): regions):
      fun get(r) :~ Set: m.get(r, Set.empty)
      let region = canonical_region(regions_eq, region)
      m ++ {region: get(region) ++ { posn }}

fun canonize_borders(borders :~ Borders,
                     regions_eq :~ Map.of(Region, Region))
  :~ Borders:
    for values(m :~ Map = {}) (values(region, vs): borders):
      fun get(r) :~ Set: m.get(r, Set.empty)
      let region = canonical_region(regions_eq, region)
      m ++ {region: get(region) ++ vs}

fun split_regions(grid :: Grid):
  let values(regions :~ Map, regions_eq, borders):
    for values(r = {}, req = {}, b = {}):
      each y: 0..grid.height
      each x: 0..grid.width
      def posn = x $ y
      assign_region(grid, posn, r, req, b)
  let borders:
    let x = grid.width - 1
    for values(b = borders) (y: 0..grid.height):
      let p = x$y
      add_border(b, #'E, regions[p], p, #'W, #'outside, p $+ Posn.E)
  let borders:
    let y = grid.height - 1
    for values(b = borders) (x: 0..grid.width):
      let p = x$y
      add_border(b, #'S, regions[p], p, #'N, #'outside, p $+ Posn.S)

  values(canonize_regions(regions, regions_eq),
         canonize_borders(borders, regions_eq))

fun debug(regions :~ Map, borders :~ Map):
  for (values(k, v :~ Set): regions):
    println(@str{@k : @v.length() posns})
  for (values(k, v :~ Set): borders):
    println(@str{@k : @v.length() sides})

fun get_puzzle_input():
  aoc.fetch_input(aoc.find_session(), 2024, 12)

fun run1(input :: String):
  def grid = Grid(input)
  def values(regions :~ Map.of(Region, Set),
             borders :~ Map.of(Region, Set)):
    split_regions(grid)
  for values(sum = 0) (region: regions.keys()):
    sum + regions[region].length() * borders[region].length()

module test:
  check run1(test_input1) ~is 140
  check run1(test_input2) ~is 772
  check run1(test_input3) ~is 1930

module part1:
  def input = get_puzzle_input()
  run1(input)

fun run2(s): #void

// check run2(test_input1) ~is #false

module part2:
  def input = get_puzzle_input()
  run2(input)
