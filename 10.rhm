#lang rhombus/static/and_meta

import:
  "util/advent_of_code.rhm" as aoc
  "util/misc.rhm" open

@example_input(test_input1){
89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732

}

fun get_puzzle_input():
  aoc.fetch_input(aoc.find_session(), 2024, 10)

namespace memoize:
  export rename _fun as fun

  class Sentinel()
  def sentinel = Sentinel()

  class Absent()
  def absent = Absent()

  // XXX: handle return annotations
  defn.macro '_fun $(name :: Identifier)($(arg :: bind_meta.Parsed), ...):
                  $body
                  ...':
    def [vars, ...]:
      for List (v: [arg, ...]): Syntax.make_temp_id()
    'def $name:
       block:
         let memo = MutableMap()
         fun inner($arg, ...):
           $body
           ...
         fun($vars, ...):
           def k = Array($vars, ...).snapshot()
           match memo.get(k, absent)
           | _ :: Sentinel:
               error(~who: #'$name, "memoized function has cycle")
           | _ :: Absent:
               memo[k] := sentinel
               // XXX: an error in inner would leave a sentinel
               def val = inner($vars, ...)
               memo[k] := val
               val
           | val: val'

class Posn(x :: Int, y :: Int):
  implements Printable
  internal _Posn

  method add(Posn(x2, y2)) :~ Posn:
    Posn(x + x2, y + y2)

  method sub(Posn(x2, y2)) :~ Posn:
    Posn(x - x2, y - y2)

  method mul(m :: Number) :~ Posn:
    Posn(x * m, y * m)

  method neighbors4() :~ List.of(Posn):
    [this $+ Posn.N,
     this $+ Posn.E,
     this $+ Posn.S,
     this $+ Posn.W]

  override method describe(mode, recur):
    @str{@x $ @y}

operator (x $ y):
  Posn(x, y)

def Posn.N =  0 $ -1
def Posn.E =  1 $  0
def Posn.S =  0 $  1
def Posn.W = -1 $  0

operator ((p1 :: Posn) $+ (p2 :: Posn)) :~ Posn:
  p1.add(p2)

operator ((p1 :: Posn) $- (p2 :: Posn)) :~ Posn:
  p1.sub(p2)

operator $* :~ Posn:
  ~stronger_than $+ $-
| ((m :: Number) $* (p :: Posn)):
    p.mul(m)
| ((p :: Posn) $* (m :: Number)):
    p.mul(m)

class Grid(lines :: List.of(String), width :: NonnegInt, height :: NonnegInt):
  implements Indexable

  property rows :~ Range: 0 .. height
  property cols :~ Range: 0 .. width

  constructor (s :: String):
    let ls = s.split("\n")
    super(ls, ls[0].length(), ls.length())

  method find_char(ch :: Char) :: Posn:
    recur find(y = rows.start()):
      match lines[y].find(to_string(ch))
      | x :: Int: x $ y
      | ~else:
          if in_grid(0, y + 1)
          | find(y + 1)
          | #false

  method find_all(ch :: Char) :: List.of(Posn):
    for List:
      each y: 0 .. height
      each x: 0 .. width
      keep_when lines[y][x] == ch
      x $ y

  method positions() :: Map.of(Char, List.of(Posn)):
    for values(m :~ Map = {}):
      each: y: 0 .. height
            line: lines
      each: x: 0 .. width
            ch: line
      skip_when ch == Char"."
      m ++ { ch: List.add(m.get(ch, []), x $ y) }

  method
  | in_grid(Posn(x, y)):
      in_grid(x, y)
  | in_grid(x :: Int, y :: Int):
      cols.has_element(x) && rows.has_element(y)

  override method get(Posn(x,y) && p):
    if in_grid(x, y)
    | lines[y][x]
    | #false

fun next_char(ch :: Char):
  Char.from_int(ch.to_int() + 1)

fun run1(input :: String):
  def grid = Grid(input)
  memoize.fun reachable_trails(p :: Posn):
    match grid[p]
    | Char"9": {p}
    | ch :: Char:
        def nch = next_char(ch)
        for values(s :~ Set = Set()) (n: p.neighbors4()):
          keep_when grid[n] == nch
          s ++ reachable_trails(n)
  for values(s = 0) (p: grid.find_all(Char"0")):
    def es :~ Set.of(Posn) = reachable_trails(p)
    s + es.length()

check run1(test_input1) ~is 36

module part1:
  def input = get_puzzle_input()
  run1(input)

@example_input(test_input2a){
.....0.
..4321.
..5..2.
..6543.
..7..4.
..8765.
..9....

}

fun run2(input):
  def grid = Grid(input)
  memoize.fun distinct_trails(p :: Posn):
    match grid[p]
    | Char"9": {[p]}
    | ch :: Char:
        def nch = next_char(ch)
        for values(s :~ Set = Set()) (n: p.neighbors4()):
          keep_when grid[n] == nch
          each t: distinct_trails(n) :~ Set.of(List.of(Posn))
          s ++ { [p, &t] }
  for values(s = 0) (p: grid.find_all(Char"0")):
    def es :~ Set.of(Posn) = distinct_trails(p)
    s + es.length()

check run2(test_input2a) ~is 3
check run2(test_input1) ~is 81

module part2:
  def input = get_puzzle_input()
  run2(input)
