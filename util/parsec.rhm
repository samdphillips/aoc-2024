#lang rhombus/static/and_meta

import:
  "stream.rhm" open

export:
  parse
  parse_string

  pure
  sequence
  choice
  try
  satisfy
  any
  label
  char
  string
  digit
  integer
  spaces
  manyl
  manyr
  many1
  many

fun string_to_list(s :: String) :: Stream:
  for List (i: 0..s.length()): s[i]

class Message(token, expected :: List.of(String)):
  method replace_expected(label :: String) :: Message:
    this with (expected = [label])

  method to_string():
    "got "
      ++ format_token()
      ++ " expected "
      ++ format_expected()

  method merge(other :: Message) :: Message:
    this with (expected = expected ++ other.expected)

  private method format_token() :: String:
    match token
    | []: "<empty>"
    | _: str.s(token, ~mode: #'expr)

  private method format_expected() :: String:
    match expected
    | []: "<unknown>"
    | [e]: e
    | es: format_expected_long(es)

  private method
  | format_expected_long([e0, e1]):
      use_dynamic
      e0.to_string() ++ " or " ++ e1.to_string()
  | format_expected_long([e, &erest]):
      use_dynamic
      e.to_string() ++ ", " ++ format_expected_long(erest)


class Ok(value, stream :: Stream, message :: Message)

class Error(message :: Message)

annot.macro 'Result': 'Ok || Error'

class Parsed(result :: Result, is_empty :: Boolean = #false)

fun pure(v):
  fun (stream :: Stream):
    Parsed(Ok(v, stream, Message(#false, [])))

fun seq(parser, f):
  fun (stream0 :: Stream):
    match parser(stream0)
    | Parsed(Ok(v, stream1, _), #true):
        f(v)(stream1)
    | Parsed(_, #true) && p_result: p_result
    | Parsed(Ok(v, stream1, _), #false):
        match f(v)(stream1)
        | Parsed(_, #true) && p_result: p_result with (is_empty = #false)
        | p_result: p_result
    | p_result: p_result

fun choice(a_p, b_p):
  fun merge_ok(v, stream, message0 :: Message, message1 :: Message):
    Parsed(Ok(v, stream, message0.merge(message1)), #true)
  fun merge_error(message0 :: Message, message1 :: Message):
    Parsed(Error(message0.merge(message1)), #true)
  fun (stream0 :: Stream):
    match a_p(stream0)
    | Parsed(Error(message0), #true):
        match b_p(stream0)
        | Parsed(Error(message1), #true):
            merge_error(message0, message1)
        | Parsed(Ok(v, stream1, message1), #false):
            merge_ok(v, stream1, message0, message1)
        | parsed: parsed
    | Parsed(Ok(v, stream1, message0), #true):
        match b_p(stream0)
        | Parsed(Error(message1), #true):
            merge_ok(v, stream1, message0, message1)
        | Parsed(Ok(_, _, message1), #true):
            merge_ok(v, stream1, message0, message1)
        | parsed: parsed
    | parsed: parsed

operator pa <|> pb: choice(pa, pb)

fun satisfy(is_satisfied):
  fun (stream :: Stream):
    if stream.is_empty()
    | Parsed(Error(Message(stream, [])), #true)
    | def tok = stream.first
      if is_satisfied(tok)
      | Parsed(Ok(tok, stream.rest, Message(#false, [])), #false)
      | Parsed(Error(Message(tok, [])), #true)

fun any(stream :: Stream):
  def m = "<any>"
  if stream.is_empty()
  | Parsed(Error(Message(stream, [m])), #true)
  | def tok = stream.first
    Parsed(Ok(tok, stream.rest, Message(#false, [m])), #false)

fun label(name :: String, p):
  fun (stream :: Stream):
    match p(stream)
    | Parsed(Error(message), #true):
        Parsed(Error(message.replace_expected(name)), #true)
    | Parsed(Ok(_, _, message) && ok, #true):
        Parsed(ok with (message = message.replace_expected(name)), #true)
    | parsed: parsed

fun try(p):
  fun (stream :: Stream):
    match p(stream)
    | Parsed(Error(_) && err, #false) && parsed:
        parsed with (is_empty = #true)
    | parsed: parsed

fun char(char :: Char):
  label(str.s(char, ~mode: #'expr),
        satisfy(fun (schar): char == schar))

fun string(string :: String):
  def size = string.length()
  label(str.s(string, ~mode: #'expr),
        for values(cont_p = pure(string)) (i: 0..size):
          sequence:
            char(string[size - i - 1])
            cont_p)

meta:
  syntax_class ParseStep:
  | '$(var :: Identifier) = $parse ...'
  | '$parse ...':
      field var: Syntax.make_temp_id()

expr.macro
| 'sequence($p, $f)': 'seq($p, $f)'
| 'sequence:
     $(step :: ParseStep)':
    '$step.parse ...'
| 'sequence:
     $(step0 :: ParseStep)
     $steps
     ...':
    'sequence($step0.parse ..., fun ($step0.var):
                                    sequence:
                                      $steps
                                      ...)'

fun manyr(p, nil, cons):
  def empty = pure(nil)
  def rec:
    sequence:
      v = p
      vs = rec <|> empty
      pure(cons(v, vs))
  try(rec) <|> empty

fun manyl(p, init, next):
  fun rec(acc):
    (sequence:
       v = p
       rec(next(acc, v)))
      <|> pure(acc)
  rec(init)

fun many(p):
  manyr(p, [], List.cons)

fun many1(p):
  sequence:
    v = p
    vs = many(p)
    pure(List.cons(v, vs))

def ZERO = Char"0".to_int()

def digit:
  label("<digit>",
        sequence:
          c = satisfy(Char.is_numeric)
          pure((c :~ Char).to_int() - ZERO))

def integer:
  sequence:
    sign
      = (sequence:
           try(char(#{#\-}))
           pure(-1))
      <|> pure(1)
    i = digit
    n = manyl(digit, i, fun(v, d): 10 * v + d)
    pure(sign * n)

def spaces:
  label("<whitespace>", many1(satisfy(Char.is_whitespace)))

fun parse(p, s :: Stream):
  match p(s)
  | Parsed(Ok(v, s, _), _): values(v, s)
  | Parsed(Error(message), _):
      error(~who: #'parse,
            message.to_string())

fun parse_string(p, s :: String):
  parse(p, string_to_list(s))

check:
  parse(pure(42), []) ~is values(42, [])

check:
  parse(pure(42), ["abc"]) ~is values(42, ["abc"])

check:
  fun | x(y :: Int): #true
      | x(y): #false
  parse(satisfy(x), [123])
  ~is values(123, [])

check:
  fun | x(y :: Int): #true
      | x(y): #false
  parse(satisfy(x), ["asdasd"])
  ~throws "asdasd"

check:
  def p:
    sequence:
      pure(42)
  parse(p, [])
  ~is values(42, [])

check:
  parse_string(string("red"), "red")
  ~is values("red", [])

check:
  parse_string(string("red"), "re")
  ~throws @str{got <empty> expected Char"d"}

check:
  parse_string(integer, "42") ~is values(42, [])
  parse_string(integer, "-42") ~is values(-42, [])

check:
  parse_string(many(char(Char"a")), "aaa")
  ~is values([Char"a", Char"a", Char"a"], [])

check:
  parse_string(many(char(Char"a")), "")
  ~is values([], [])

check:
  parse_string(many1(char(Char"a")), "aaa")
  ~is values([Char"a", Char"a", Char"a"], [])

check:
  parse_string(many1(char(Char"a")), "")
  ~throws "Char\"a\""