#lang rhombus/static

import:
  "util/advent_of_code.rhm" as aoc
  "util/parsec.rhm" open
  "util/misc.rhm" open



@example_input(test_input1){
3   4
4   3
2   5
1   3
3   9
3   3

}

def line_p:
  sequence:
    l = integer
    spaces
    r = integer
    char(Char"\n")
    pure([l, r])

def part1_input_p:
  manyl(line_p,
        Pair([], []),
        fun(Pair(ls :~ List, rs :~ List), [l, r]):
          Pair(ls.add(l), rs.add(r)))

fun parse_input(p, s):
  def values(Pair(l, r), []) = parse_string(p, s)
  values(l, r)

fun run1(s):
  let values(ll :~ List, rl :~ List) = parse_input(part1_input_p, s)
  let ll = ll.sort()
  let rl = rl.sort()
  for values(sum = 0) (l: ll, r: rl):
    sum + math.abs(l - r)

check run1(test_input1) ~is 11

module part1:
  def input = aoc.fetch_input(aoc.find_session(), 2024, 1)
  run1(input)

def part2_input_p:
  manyl(line_p,
        Pair([], {}),
        fun(Pair(ls :~ List, m :~ Map), [l, r]):
          Pair(ls.add(l), m ++ {r: m.get(r, 0) + 1}))

fun run2(s):
  let values(ll :~ List, rm :~ Map) = parse_input(part2_input_p, s)
  for values(sum = 0) (l: ll):
    sum + l * rm.get(l, 0)

check run2(test_input1) ~is 31

module part2:
  def input = aoc.fetch_input(aoc.find_session(), 2024, 1)
  run2(input)