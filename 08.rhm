#lang rhombus/static

import:
  "util/advent_of_code.rhm" as aoc
  "util/misc.rhm" open

@example_input(test_input1){
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............

}

class Posn(x :: Int, y :: Int):
  implements Printable

  method add(Posn(x2, y2)) :~ Posn:
    Posn(x + x2, y + y2)

  method sub(Posn(x2, y2)) :~ Posn:
    Posn(x - x2, y - y2)

  method mul(m :: Number) :~ Posn:
    Posn(x * m, y * m)

  override method describe(mode, recur):
    @str{@x $ @y}

operator (x $ y):
  Posn(x, y)

operator ((p1 :: Posn) $+ (p2 :: Posn)) :~ Posn:
  p1.add(p2)

operator ((p1 :: Posn) $- (p2 :: Posn)) :~ Posn:
  p1.sub(p2)

operator $* :~ Posn:
  ~stronger_than $+ $-
| ((m :: Number) $* (p :: Posn)):
    p.mul(m)
| ((p :: Posn) $* (m :: Number)):
    p.mul(m)

class Grid(lines :: List.of(String), width :: NonnegInt, height :: NonnegInt):
  implements Indexable

  property rows :~ Range: 0 .. height
  property cols :~ Range: 0 .. width

  constructor (s :: String):
    let ls = s.split("\n")
    super(ls, ls[0].length(), ls.length())

  method find_char(ch :: Char) :: Posn:
    recur find(y = rows.start()):
      match lines[y].find(to_string(ch))
      | x :: Int: x $ y
      | ~else:
          if in_grid(0, y + 1)
          | find(y + 1)
          | #false

  method find_all(ch :: Char) :: List.of(Posn):
    for List:
      each y: 0 .. height
      each x: 0 .. width
      keep_when lines[y][x] == ch
      x $ y

  method positions() :: Map.of(Char, List.of(Posn)):
    for values(m :~ Map = {}):
      each: y: 0 .. height
            line: lines
      each: x: 0 .. width
            ch: line
      skip_when ch == Char"."
      m ++ { ch: List.add(m.get(ch, []), x $ y) }

  method
  | in_grid(Posn(x, y)):
      in_grid(x, y)
  | in_grid(x :: Int, y :: Int):
      cols.has_element(x) && rows.has_element(y)

  override method get(Posn(x,y) && p):
    if in_grid(x, y)
    | lines[y][x]
    | #false


fun get_puzzle_input():
  aoc.fetch_input(aoc.find_session(), 2024, 8)

fun find_antinodes(grid :~ Grid,
                   collect_antinodes,
                   nodes :~ List.of(Posn)) :~ List:
  def len = nodes.length()
  for Set:
    each i: 0..len
    each j: i+1 .. len
    each anti_node: (collect_antinodes(nodes[i], nodes[j]) :~ List)
    anti_node

fun run1(input):
  fun pair_antinodes(p0, p1) :~ List.of(Posn):
    fun antinode(p) :~ List:
      if grid.in_grid(p) | [p] | []
    antinode(p0 $+ (p0 $- p1))
      ++ antinode(p1 $+ (p1 $- p0))
  def grid = Grid(input)
  def {_: nodes, ...} = grid.positions()
  def all_antinodes:
    for values(s :~ Set = Set{}) (f_nodes: [nodes, ...]):
      println(@str{@s.length() antinodes found so far})
      s ++ find_antinodes(grid, pair_antinodes, f_nodes)
  all_antinodes.length()

check run1(test_input1) ~is 14

module part1:
  def input = get_puzzle_input()
  run1(input)

fun run2(input):
  fun resonant_antinodes(p0 :~ Posn, p1 :~ Posn) :~ List.of(Posn):
    def d:
      cond
      | p0.y == p1.y:
          if p0.x < p1.x
          | p1 $- p0
          | p0 $- p1
      | p0.y < p1.y:
          p1 $- p0
      | ~else: p0 $- p1
    def o = if p0.y == 0 | p1 | p0
    def values(t_lo, t_hi):
      if d.y == 0
      | values(math.floor((0 - o.x) / d.x),
               math.ceiling((grid.width - o.x) / d.x))
      | values(math.floor((0 - o.y) / d.y),
               math.ceiling((grid.height - o.y) / d.y))
    for List (t: t_lo..t_hi):
      def antinode = o $+ d $* t
      keep_when grid.in_grid(antinode)
      antinode
  def grid = Grid(input)
  def {_: nodes, ...} = grid.positions()
  def all_antinodes:
    for values(s :~ Set = Set{}) (f_nodes: [nodes, ...]):
      println(@str{@s.length() antinodes found so far})
      s ++ find_antinodes(grid, resonant_antinodes, f_nodes)
  all_antinodes.length()

check run2(test_input1) ~is 34

module part2:
  def input = get_puzzle_input()
  run2(input)
