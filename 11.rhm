#lang rhombus/static/and_meta

import:
  "util/advent_of_code.rhm" as aoc
  "util/misc.rhm" open
  rhombus/rx open

@example_input(test_input1){
125 17

}

namespace memoize:
  export rename _fun as fun

  class Sentinel()
  def sentinel = Sentinel()

  class Absent()
  def absent = Absent()

  // XXX: handle return annotations
  defn.macro '_fun $(name :: Identifier)($(arg :: bind_meta.Parsed), ...):
                  $body
                  ...':
    def [vars, ...]:
      for List (v: [arg, ...]): Syntax.make_temp_id()
    'def $name:
       block:
         let memo = MutableMap()
         fun inner($arg, ...):
           $body
           ...
         fun($vars, ...):
           def k = Array($vars, ...).snapshot()
           match memo.get(k, absent)
           | _ :: Sentinel:
               error(~who: #'$name, "memoized function has cycle")
           | _ :: Absent:
               memo[k] := sentinel
               // XXX: an error in inner would leave a sentinel
               def val = inner($vars, ...)
               memo[k] := val
               val
           | val: val'

fun read_input(s :: String) :: List.of(NonnegInt):
  // RRR: RX.split should be annot List.of(String)
  for List (ns :~ String: rx'space+'.split(s)):
    skip_when ns == ""
    ns.to_int()

fun count_digits :: NonnegInt
| count_digits(0): 0
| count_digits(n :: NonnegInt):
    1 + count_digits(n div 10)

fun split_number(n :: NonnegInt, i :: NonnegInt):
  def p = math.expt(10, i)
  [n div p, n mod p]

fun is_even(n :: NonnegInt) :: Boolean:
  n rem 2 == 0

fun step(n :: NonnegInt) :: List.of(NonnegInt):
  cond
  | n == 0: [1]
  | ~else:
      def i = count_digits(n)
      if is_even(i)
      | split_number(n, i / 2)
      | [n * 2024]

memoize.fun many(ns :: List.of(NonnegInt), k):
  cond
  | k == 0: ns
  | ~else:
      for List (n0: ns):
        each n1: (many(step(n0), k - 1) :~ List)
        n1

fun get_puzzle_input():
  aoc.fetch_input(aoc.find_session(), 2024, 11)

fun run1(input):
  def nums = read_input(input)
  def res :: List = many(nums, 25)
  res.length()

module test:
  check run1(test_input1) ~is 55312

module part1:
  def input = get_puzzle_input()
  run1(input)

fun run2(s): #void

// check run2(test_input1) ~is #false

module part2:
  def input = get_puzzle_input()
  run2(input)
