#lang rhombus/static/and_meta

import:
  "util/advent_of_code.rhm" as aoc
  "util/misc.rhm" open
  rhombus/rx open

@example_input(test_input1){
125 17

}

namespace memoize:
  export rename _fun as fun

  class Sentinel()
  def sentinel = Sentinel()

  class Absent()
  def absent = Absent()

  defn.macro '_fun $(name :: Identifier)($(arg :: bind_meta.Parsed), ...)
                :~ $(res_ann :: annot_meta.Parsed):
                  $body
                  ...':
    def [vars, ...]:
      for List (v: [arg, ...]): Syntax.make_temp_id()
    // XXX: what to do about converter annotations?
    def values(_, res_statinfo) = annot_meta.unpack_predicate(res_ann)
    def res_statinfo_packed = statinfo_meta.pack(res_statinfo)
    '«def $name:
        block:
          let memo = MutableMap()
          fun inner($arg, ...):
            $body
            ...
          fun($vars, ...):
            def k = Array($vars, ...).snapshot()
            match memo.get(k, absent)
            | _ :: Sentinel:
                error(~who: #'$name, "memoized function has cycle")
            | _ :: Absent:
                memo[k] := sentinel
                // XXX: an error in inner would leave a sentinel
                def val = inner($vars, ...)
                memo[k] := val
                val
            | val: val
      statinfo.macro '$name':
        '(($statinfo_meta.call_result_key, $res_statinfo_packed))'»'

fun read_input(s :: String) :: List.of(NonnegInt):
  // RRR: RX.split should be annot List.of(String)
  for List (ns :~ String: rx'space+'.split(s)):
    skip_when ns == ""
    ns.to_int()

fun count_digits :: NonnegInt
| count_digits(0): 0
| count_digits(n :: NonnegInt):
    1 + count_digits(n div 10)

fun split_number(n :: NonnegInt, i :: NonnegInt):
  def p = math.expt(10, i)
  [n div p, n mod p]

fun is_even(n :: NonnegInt) :: Boolean:
  n rem 2 == 0

fun step(n :: NonnegInt) :~ List.of(NonnegInt):
  cond
  | n == 0: [1]
  | ~else:
      def i = count_digits(n)
      if is_even(i)
      | split_number(n, i / 2)
      | [n * 2024]

memoize.fun stepn(n :~ NonnegInt, i :~ NonnegInt) :~ NonnegInt:
  if i == 0
  | 1
  | for values(s = 0) (n0: step(n)):
      s + stepn(n0, i - 1)

fun many([n, ...] :: List.of(NonnegInt), k):
  math.sum(stepn(n, k), ...)

fun get_puzzle_input():
  aoc.fetch_input(aoc.find_session(), 2024, 11)

fun run(input, cycles):
  def nums = read_input(input)
  many(nums, cycles)

module test:
  check run(test_input1, 25) ~is 55312

module part1:
  def input = get_puzzle_input()
  run(input, 25)

module part2:
  def input = get_puzzle_input()
  run(input, 75)
